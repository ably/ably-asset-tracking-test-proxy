openapi: 3.0.3

info:
  title: Ably Asset Tracking Fault Simulation Proxy
  description: |-
    TODO some Markdown description
  version: 0.1.0

servers:
  - url: http://localhost:8080

paths:
  /faults:
    get:
      summary: List all faults
      description: List all faults
      operationId: listFaults
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                #Â TODO schema
                $ref: '#/components/schemas/Pet'          

  /faults/{name}/simulation:
    post:
      summary: Create a fault simulation
      description: Creates a new fault simulation and starts its proxy
      operationId: createFaultSimulation
      parameters:
        - name: name
          in: path
          # TODO where should this come from?
          description: Name of fault to create a simulation for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                # TODO schema
                $ref: '#/components/schemas/Pet'          

  /fault-simulations/{id}/enable:
    post:
      summary: Enable a fault simulation
      description: Enables a fault simulation
      operationId: enableFaultSimulation
      parameters:
        - name: id
          in: path
          description: ID of fault simulation to enable
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation

  /fault-simulations/{id}/resolve:
    post:
      summary: Resolve a fault simulation
      description: Resolves a fault simulation
      operationId: resolveFaultSimulation
      parameters:
        - name: id
          in: path
          description: ID of fault simulation to resolve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation

  /fault-simulations/{id}/clean-up:
    post:
      summary: Clean up a fault simulation
      description: Cleans up a fault simulation
      operationId: cleanUpFaultSimulation
      parameters:
        - name: id
          in: path
          description: ID of fault simulation to clean up
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
